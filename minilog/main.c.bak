/**************************************************************************//**
 * @file     main.c
 * @version  V3.00
 * $Revision: 3 $
 * $Date: 14/01/28 11:44a $
 * @brief    M051 Series GPIO Driver Sample Code
 *
 * @note
 * Copyright (C) 2013 Nuvoton Technology Corp. All rights reserved.
 ******************************************************************************/
#include <stdio.h>
#include "M051Series.h"

#define PLLCON_SETTING      CLK_PLLCON_50MHz_HXT
#define PLL_CLOCK           50000000

#define RXBUFSIZE 128//1024

/*---------------------------------------------------------------------------------------------------------*/
/* Global variables                                                                                        */
/*---------------------------------------------------------------------------------------------------------*/
uint8_t g_u8RecData[RXBUFSIZE]  = {0};
unsigned char gucUartReceivePointer;
unsigned char gucUartCommandSucceed;
unsigned char	gucOutputVoltageType,gucOutputVoltagePeak;

// gain table
unsigned char gucGainTableIndex;
float 				gfloatGainTable[6]
										={0.3333,	1.0,	3.6,	10.804,	33.01,	99.04};
unsigned char gucGainTable[8]
										={0x02,		0x0e,	0x03,	0x0f,		0x00,		0x0c};

unsigned int uiAdc8320Value;
uint32_t u32iPortStatus;
uint32_t u32iOutputVoltage;
										
unsigned int uiTimerCounter;
										
volatile uint32_t g_au32TMRINTCount[4] = {0};
uint32_t g_au32TMR1Count;

//self-define
#define ADS8320_CLK		P14
#define ADS8320_CS		P15
#define ADS8320_DOUT	P41
//
#define GAIN_SCALER_IN1	P10
#define GAIN_SCALER_IN2	P11
#define GAIN_SCALER_IN3	P12
#define GAIN_SCALER_IN4	P13
//
#define ANALOG_POWER_PIN	P17

void UART_TEST_HANDLE(void);

/////////////////////////////////////////////
// FUNCTION
//  delay_time
void delay_time(int timer)
{
	int i;
	for(i=0;i<timer;i++)
		;
}
/////////////////////////////////////////////
// FUNCTION
//  ADS8320
void init_ext_ad()
{
		ADS8320_CS = 1;
		ADS8320_CLK = 1;
}

unsigned int read_ext_adc()
{
		int i;
		unsigned int data;
	
		data = 0;
		ADS8320_CS = 0;
		for(i=0;i<5;i++) // take sample and send start bit
		{
			ADS8320_CLK = 0;
			delay_time(15);
			ADS8320_CLK = 1;
			delay_time(13);
		}
		for(i=0;i<16;i++) // read 16-bits data back
		{
			ADS8320_CLK = 0;
			if (ADS8320_DOUT)
				data += 1;
			ADS8320_CLK = 1;
			data <<= 1;
		}
		//for(i=0;i<5;i++) // take sample and send start bit
		{
		ADS8320_CS = 1;
			ADS8320_CLK = 0;
			ADS8320_CLK = 0;
			ADS8320_CLK = 1;
			ADS8320_CLK = 1;
			ADS8320_CLK = 0;
			ADS8320_CLK = 0;
			ADS8320_CLK = 1;
			ADS8320_CLK = 1;
			ADS8320_CLK = 0;
			ADS8320_CLK = 0;
			ADS8320_CLK = 1;
			ADS8320_CLK = 1;
			ADS8320_CLK = 0;
			ADS8320_CLK = 0;
			ADS8320_CLK = 1;
			ADS8320_CLK = 1;
			ADS8320_CLK = 0;
			ADS8320_CLK = 0;
			ADS8320_CLK = 1;
			ADS8320_CLK = 1;
		}
		ADS8320_CS = 1;
		//for(i=0;i<100;i++) // take sample and send start bit
		//{
			//ADS8320_CLK = 0;
			//ADS8320_CLK = 1;
		//}
		return(data);
}


/////////////////////////////////////////////
// FUNCTION
//  reset gain
void RESET_Gain(void)
{
		gucGainTableIndex = 0;
		u32iPortStatus = GPIO_GET_IN_DATA(P1);
		u32iPortStatus &= 0xfff0;  // clear gain scaler bits P1[3:0]
		//P13 = 0;
		//P12 = 0;
		//P11 = 1;
		//P10 = 0;
		u32iPortStatus |= gucGainTable[gucGainTableIndex];
		GPIO_SET_OUT_DATA (P1,u32iPortStatus);
}
void SET_Gain(unsigned char index)
{
		u32iPortStatus = GPIO_GET_IN_DATA(P1);
		u32iPortStatus &= 0xfff0;  // clear gain scaler bits P1[3:0]
		u32iPortStatus |= gucGainTable[index];
		GPIO_SET_OUT_DATA (P1,u32iPortStatus);
}

void SET_Output_Voltage(unsigned char value)
{
		if(value & 0x01) 
			P00 = 1;
		else
			P00 = 0;
		if(value & 0x02) 
			P01 = 1;
		else
			P01 = 0;
		if(value & 0x04) 
			P02 = 1;
		else
			P02 = 0;
		if(value & 0x08) 
			P03 = 1;
		else
			P03 = 0;
}
/////////////////////////////////////////////
/////////////////////////////////////////////
/////////////////////////////////////////////


void SYS_Init(void)
{
    /*---------------------------------------------------------------------------------------------------------*/
    /* Init System Clock                                                                                       */
    /*---------------------------------------------------------------------------------------------------------------*/
    /* Enable IRC22M clock */
    CLK->PWRCON |= CLK_PWRCON_IRC22M_EN_Msk;

    /* Waiting for IRC22M clock ready */
    CLK_WaitClockReady(CLK_CLKSTATUS_IRC22M_STB_Msk);

    /* Switch HCLK clock source to HIRC */
    CLK->CLKSEL0 = CLK_CLKSEL0_HCLK_S_HIRC;

    /* Set PLL to Power-down mode and PLL_STB bit in CLKSTATUS register will be cleared by hardware.*/
    CLK->PLLCON |= CLK_PLLCON_PD_Msk;

    /* Enable external 12 MHz XTAL, IRC10K */
    CLK->PWRCON |= CLK_PWRCON_XTL12M_EN_Msk | CLK_PWRCON_OSC10K_EN_Msk;

    /* Enable PLL and Set PLL frequency */
    CLK->PLLCON = PLLCON_SETTING;

    /* Waiting for clock ready */
    CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk | CLK_CLKSTATUS_XTL12M_STB_Msk | CLK_CLKSTATUS_IRC10K_STB_Msk);

    /* Switch HCLK clock source to PLL, STCLK to HCLK/2 */
    CLK->CLKSEL0 = CLK_CLKSEL0_STCLK_S_HCLK_DIV2 | CLK_CLKSEL0_HCLK_S_PLL;

    /* Enable peripheral clock */
    CLK->APBCLK = CLK_APBCLK_UART0_EN_Msk |
                  CLK_APBCLK_TMR0_EN_Msk | CLK_APBCLK_TMR1_EN_Msk | CLK_APBCLK_TMR2_EN_Msk | CLK_APBCLK_TMR3_EN_Msk;

    /* Peripheral clock source */
    CLK->CLKSEL1 = CLK_CLKSEL1_UART_S_PLL |
                   CLK_CLKSEL1_TMR0_S_HXT | CLK_CLKSEL1_TMR1_S_HCLK | CLK_CLKSEL1_TMR2_S_HIRC | CLK_CLKSEL1_TMR3_S_HXT;

    /* Update System Core Clock */
    /* User can use SystemCoreClockUpdate() to calculate PllClock, SystemCoreClock and CycylesPerUs automatically. */
    SystemCoreClockUpdate();
    
    /*---------------------------------------------------------------------------------------------------------*/
    /* Init I/O Multi-function                                                                                 */
    /*---------------------------------------------------------------------------------------------------------*/

    /* Set P3 multi-function pins for UART0 RXD and TXD */
    /* Set P3 multi-function pins for UART0 RXD, TXD, and T1EX */
    //SYS->P3_MFP &= ~(SYS_MFP_P30_Msk | SYS_MFP_P31_Msk);
    SYS->P3_MFP = SYS_MFP_P30_RXD0 | SYS_MFP_P31_TXD0 | SYS_MFP_P34_T0 | SYS_MFP_P35_T1 | SYS_MFP_P33_T1EX;

}

void UART0_Init(void)
{
    /*---------------------------------------------------------------------------------------------------------*/
    /* Init UART                                                                                               */
    /*---------------------------------------------------------------------------------------------------------*/
    /* Reset UART */
    SYS_ResetModule(UART0_RST);

    /* Configure UART0 and set UART0 Baudrate */
    UART_Open(UART0, 115200);
}


/**
 * @brief       Timer0 IRQ
 *
 * @param       None
 *
 * @return      None
 *
 * @details     The Timer0 default IRQ, declared in startup_M051Series.s.
 */
void TMR0_IRQHandler(void)
{
    if(TIMER_GetIntFlag(TIMER0) == 1)
    {
        /* Clear Timer0 time-out interrupt flag */
        TIMER_ClearIntFlag(TIMER0);
				uiTimerCounter++;

				GPIO_SET_OUT_DATA (P0,u32iOutputVoltage);
			if (gucOutputVoltageType =='A')
			{
				if(u32iOutputVoltage >= 0x80) 
				{
					u32iOutputVoltage = 0x00ff-u32iOutputVoltage;
				}else
				{
					u32iOutputVoltage = 0x00ff-u32iOutputVoltage;
				}
			}
    }
}


/**
 * @brief       Timer1 IRQ
 *
 * @param       None
 *
 * @return      None
 *
 * @details     The Timer1 default IRQ, declared in startup_M051Series.s.
 */
void TMR1_IRQHandler(void)
{
    if(TIMER_GetCaptureIntFlag(TIMER1) == 1)
    {
			P07=~P07;
        /* Clear Timer1 capture interrupt flag */
        TIMER_ClearCaptureIntFlag(TIMER1);

        g_au32TMRINTCount[1]++;
			//
			g_au32TMR1Count = TIMER_GetCaptureData(TIMER1);
			if (g_au32TMRINTCount[1]%2)
				TIMER_EnableCapture(TIMER1, TIMER_CAPTURE_COUNTER_RESET_MODE, TIMER_CAPTURE_FALLING_EDGE);
			else
				TIMER_EnableCapture(TIMER1, TIMER_CAPTURE_FREE_COUNTING_MODE, TIMER_CAPTURE_FALLING_EDGE);
    }
}


/*---------------------------------------------------------------------------------------------------------*/
/* ISR to handle UART Channel 0 interrupt event                                                            */
/*---------------------------------------------------------------------------------------------------------*/
void UART0_IRQHandler(void)
{
    UART_TEST_HANDLE();
}
/*---------------------------------------------------------------------------------------------------------*/
/* UART Callback function                                                                                  */
/*---------------------------------------------------------------------------------------------------------*/
void UART_TEST_HANDLE()
{
    uint8_t u8InChar = 0xFF;
    uint32_t u32IntSts = UART0->ISR;

    if(u32IntSts & UART_ISR_RDA_INT_Msk)
    {
        //printf("\nInput:");

        /* Get all the input characters */
        while(UART_IS_RX_READY(UART0))
        {
            /* Get the character from UART Buffer */
            u8InChar = UART_READ(UART0);
					
						if (gucUartReceivePointer > 3) 
						{
							gucUartReceivePointer = 0;
						}
					
            if (gucUartReceivePointer == 0)
						{
								if(u8InChar == '?')
								{
									g_u8RecData[gucUartReceivePointer] = u8InChar;
								}
						}
						if (gucUartReceivePointer == 1)
						{
								if(u8InChar == '*')
								{
									g_u8RecData[gucUartReceivePointer] = u8InChar;
								}else
								{
									gucUartReceivePointer = 5;
								}
						}
						
						if(gucUartReceivePointer == 2)
						{
								if ((u8InChar == 'D')||(u8InChar == 'A')||(u8InChar == 'S'))
								{
										g_u8RecData[gucUartReceivePointer] = u8InChar;
										gucOutputVoltageType = u8InChar;
								}else
								{
										gucUartReceivePointer = 6; // unknow command, restart command protocol
								}
						}
						if(gucUartReceivePointer == 3)
						{
								g_u8RecData[gucUartReceivePointer] = u8InChar;
								gucOutputVoltagePeak = u8InChar;
								gucUartReceivePointer = 7; // unknow command, restart command protocol
								gucUartCommandSucceed = 1; // set command successful flag
								printf("**");
						}
						// increase pointer
						gucUartReceivePointer++;
        }
    }
}
/*---------------------------------------------------------------------------------------------------------*/
/* MAIN function                                                                                           */
/*---------------------------------------------------------------------------------------------------------*/
int main(void)
{
		//unsigned int uiAdc8320Value;
		int i;
		int iFlag;
		//float floatVoltage;
    volatile uint32_t u32InitCount;

    /* Unlock protected registers */
    SYS_UnlockReg();

    /* Init System, peripheral clock and multi-function I/O */
    SYS_Init();

    /* Lock protected registers */
    SYS_LockReg();

    /* Init UART0 for printf */
    UART0_Init();
		gucUartReceivePointer = 0;
		gucUartCommandSucceed = 0;

    //printf("\n\nCPU @ %d Hz\n", SystemCoreClock);
    printf("+-------------------------------------------------+\n");
    printf("|    P1.0(CLK) and P1.1(CS) P4.1(DATA)            |\n");
    printf("+-------------------------------------------------+\n\n");

    /* Configure P1.0/P1.1 as Output mode and P4.1 as Input mode */
    GPIO_SetMode(P0, BIT0, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P0, BIT1, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P0, BIT2, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P0, BIT3, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P0, BIT4, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P0, BIT5, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P0, BIT6, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P0, BIT7, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P1, BIT0, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P1, BIT1, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P1, BIT2, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P1, BIT3, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P1, BIT4, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P1, BIT5, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P1, BIT6, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P1, BIT7, GPIO_PMD_OUTPUT);
    GPIO_SetMode(P4, BIT1, GPIO_PMD_INPUT);

			// turn off analog power
			ANALOG_POWER_PIN = 0;

    /* Enable Interrupt and install the call back function */
    UART_ENABLE_INT(UART0, (UART_IER_RDA_IEN_Msk | UART_IER_THRE_IEN_Msk | UART_IER_RTO_IEN_Msk));
		NVIC_EnableIRQ(UART0_IRQn);
		
    /* Initial ADC8320 */
    init_ext_ad();
		RESET_Gain();
			uiAdc8320Value = 0;
			// read data
			for (i=0;i<16;i++)
			{
					uiAdc8320Value += read_ext_adc();
			}
    /* Open Timer0 frequency to 0.5 Hz in periodic mode, and enable interrupt */
    TIMER0->TCMPR = __HXT/2000;
    TIMER0->TCSR = TIMER_TCSR_IE_Msk | TIMER_PERIODIC_MODE;
    TIMER_SET_PRESCALE_VALUE(TIMER0, 0);
		uiTimerCounter = 0;
    /* Enable Timer0 ~ Timer3 NVIC */
    NVIC_EnableIRQ(TMR0_IRQn);
		//
			//
    /* Initial Timer1 default setting */
    TIMER_Open(TIMER1, TIMER_CONTINUOUS_MODE, 1);
    /* Configure Timer1 setting for external counter input and capture function */
    TIMER_SET_PRESCALE_VALUE(TIMER1, 1000);
    TIMER_SET_CMP_VALUE(TIMER1, 0xFFFFFF);
    TIMER_EnableEventCounter(TIMER1, TIMER_COUNTER_FALLING_EDGE);
		TIMER_DisableEventCounter(TIMER1);
    //TIMER_EnableCapture(TIMER1, TIMER_CAPTURE_FREE_COUNTING_MODE, TIMER_CAPTURE_FALLING_EDGE);
    TIMER_EnableCapture(TIMER1, TIMER_CAPTURE_COUNTER_RESET_MODE, TIMER_CAPTURE_FALLING_EDGE);
    TIMER_EnableCaptureInt(TIMER1);
    /* Enable Timer1 NVIC */
    NVIC_EnableIRQ(TMR1_IRQn);
    /* Clear Timer1 interrupt counts to 0 */
    u32InitCount = g_au32TMRINTCount[1] = 1;
		//
    TIMER_Start(TIMER1);
			
    /* Check T1EX interrupt counts */
    while(g_au32TMRINTCount[1] <= 20)
    //while(1)
    {
        if(g_au32TMRINTCount[1] != u32InitCount)
        {
            printf("[%2d] - %4d\n", g_au32TMRINTCount[1], g_au32TMR1Count);//TIMER_GetCaptureData(TIMER1));
            u32InitCount = g_au32TMRINTCount[1];
        }
    }

    /* Stop Timer0, Timer1 and Timer3 counting */
    TIMER_Close(TIMER1);

    printf("*** PASS ***\n");

			
			//
			u32iOutputVoltage = 0x0000;
  while(1)
	//while_loop:
	{
    if(gucUartCommandSucceed == 1)
		{
				u32iOutputVoltage = gucOutputVoltagePeak;
			uiTimerCounter = 0;
			/* Start Timer0 ~ Timer3 counting */
			TIMER_Start(TIMER0);
			// wait for 5 times of output voltage cycle
    /* Disable Interrupt */
			gucUartCommandSucceed = 0;
			UART_DISABLE_INT(UART0, (UART_IER_RDA_IEN_Msk | UART_IER_THRE_IEN_Msk | UART_IER_RTO_IEN_Msk));
			NVIC_DisableIRQ(UART0_IRQn);
			gucGainTableIndex = 0;
			RESET_Gain();
			///*
			//while(uiTimerCounter<5);
			// turn on analog power
			ANALOG_POWER_PIN = 1;
				delay_time(50000);
				delay_time(50000);
				delay_time(50000);
			//do{
			read_adc_loop:
				iFlag = 0;
				// read data
				SET_Gain(gucGainTableIndex);
				delay_time(50000);
				delay_time(50000);
				uiAdc8320Value = 0;
				for (i=0;i<16;i++)
				{
					uiAdc8320Value += read_ext_adc();
				}
				uiAdc8320Value /= 16;
				//
				if (58000 <= uiAdc8320Value)
				{
					if (gucGainTableIndex >= 1)
					{
						gucGainTableIndex--;
						iFlag = 1;
					}
				}
				if (uiAdc8320Value <= 10000)
				{
					if (gucGainTableIndex < 5)
					{
						gucGainTableIndex++;
						iFlag = 1;
					}
				}
			//}while(iFlag);
			if (iFlag) goto read_adc_loop;
			// finish read_adc_loop
			printf("%02d",gucGainTableIndex);
			printf("%06d",uiAdc8320Value);

			RESET_Gain();
			// turn off analog power
			ANALOG_POWER_PIN = 0;
			// stop timer
			TIMER_Stop(TIMER0);
			/* Enable Interrupt and install the call back function */
			UART_ENABLE_INT(UART0, (UART_IER_RDA_IEN_Msk | UART_IER_THRE_IEN_Msk | UART_IER_RTO_IEN_Msk));
			NVIC_EnableIRQ(UART0_IRQn);
		}
	}
	//goto while_loop;
}

/*** (C) COPYRIGHT 2013 Nuvoton Technology Corp. ***/
